 //要点：
//1.IO设置要正确
//2.checksum不过时,注意unit 8的定义,低8位 ,checksum & 0x00ff  做运算，取低8位，
//3.两个时序调好,1G以上的智能机系统,要用remote_IC_driver_MBIO_V1.9.c中的V1.9以上的版本
//4.硬件接好
//5.电压供电:2.4-3.6V,200mA以上


//readdata |= GetDINStatus();  //hxd;当学习读不到时可以这样试：readdata |= GetDINStatus()?0x01:0x00;

#include "infrared_driver.h"
/*----------------------------------------------------------------
                      GPIO13  Input Get Level 
----------------------------------------------------------------*/
LOCAL os_timer_t timems;
void gpio13GetLevel()
{
     os_printf("GPIO13 Get Level %d\n",GPIO_INPUT_GET(13));
   //   GPIO_OUTPUT_SET(15, level&0x01);
    GPIO_OUTPUT_SET(REMOTE_BUSY_PIN, 0);
   os_printf("GPIO13 Get Level %d\n",GPIO_INPUT_GET(13));
}
void gpio13InputTest()
{
    PIN_FUNC_SELECT(PERIPHS_IO_MUX_MTCK_U,FUNC_GPIO13);
    GPIO_DIS_OUTPUT(13);
    os_timer_disarm(&timems);
    os_timer_setfn(&timems, (os_timer_func_t *)gpio13GetLevel, 0);
    os_timer_arm(&timems, 1000, 1);
}

//设置三个ＩＯ===================================================================================================

/*******************************************
	SDA_PIN
*******************************************/
void ICACHE_FLASH_ATTR Set_SDA_IO(void)
{
    /* Set this port to IO port of SDA */
	ETS_GPIO_INTR_DISABLE();
	//GPIO_ModeSetup(REMOTE_DIN_PIN, 0x00);	//设置与SDA通讯的管脚为ＩＯ模式，不是AD，中断等其它模式
	  //PIN_FUNC_SELECT(I2C_MASTER_SDA_MUX, I2C_MASTER_SDA_FUNC);
	PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO2_U, FUNC_GPIO2);
	
    GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_DIN_PIN)), GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_DIN_PIN))) | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_ENABLE)); //open drain;
    GPIO_REG_WRITE(GPIO_ENABLE_ADDRESS, GPIO_REG_READ(GPIO_ENABLE_ADDRESS) | (1 << REMOTE_DIN_PIN));
    ETS_GPIO_INTR_ENABLE();
}

void ICACHE_FLASH_ATTR SetSDAInput(void)
{
    /* It set SDA port as an input */	
	GPIO_DIS_OUTPUT(GPIO_ID_PIN(2));  			///设置与SDA通讯的管脚为输入模式，关闭下拉
}

void ICACHE_FLASH_ATTR SetSDAOutput(void)
{
    /* It set SDA port as an output */	
	gpio_output_set(0, 0, BIT2, 0);		//设置与SDA通讯的管脚为输出模式
}

void ICACHE_FLASH_ATTR  SetSDAHigh(void)
{
    /* It output a High level to SDA here. */	
	GPIO_OUTPUT_SET(REMOTE_DIN_PIN,1);		//设置与SDA通讯的管脚为输出1，高电平
}

void ICACHE_FLASH_ATTR SetSDALow(void)
{
    /* It output a Low level to SDA here. */	
	GPIO_OUTPUT_SET(REMOTE_DIN_PIN, 0);		//设置与SDA通讯的管脚为输出0，低电平
}

UINT8 ICACHE_FLASH_ATTR GetACKStatus(void)
{
	return GPIO_INPUT_GET(GPIO_ID_PIN(REMOTE_DIN_PIN));     ///读ＳＤＡ的状态
}

UINT8 ICACHE_FLASH_ATTR GetDINStatus(void)
{
	return GPIO_INPUT_GET(GPIO_ID_PIN(REMOTE_DIN_PIN));		//读ＳＤＡ的状态
}

/*******************************************
	SCK_PIN  同上，参考SDA
*******************************************/
void ICACHE_FLASH_ATTR Set_SCL_IO(void)
{
	/* Set this port to IO port of SCL */
	ETS_GPIO_INTR_DISABLE();
	PIN_FUNC_SELECT(PERIPHS_IO_MUX_MTMS_U, FUNC_GPIO14);
    GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_CLK_PIN)), GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_CLK_PIN))) | GPIO_PIN_PAD_DRIVER_SET(REMOTE_CLK_PIN)); //open drain;
    GPIO_REG_WRITE(GPIO_ENABLE_ADDRESS, GPIO_REG_READ(GPIO_ENABLE_ADDRESS) | (1 << REMOTE_CLK_PIN));
   ETS_GPIO_INTR_ENABLE();
}

void ICACHE_FLASH_ATTR SetSCLOutput(void)
{
    /* It set SCL port as an output */
	gpio_output_set(0, 0, BIT14, 0);//GPIO_InitIO(1,REMOTE_CLK_PIN); 	
}

void ICACHE_FLASH_ATTR SetSCLInput(void)
{
    /* It set SCL port as an Input */
	GPIO_DIS_OUTPUT(GPIO_ID_PIN(14));  	
}


void ICACHE_FLASH_ATTR SetSCLHigh(void)
{
    /* It output a High level to SCL here. */	
	GPIO_OUTPUT_SET(REMOTE_CLK_PIN,1);
}

void ICACHE_FLASH_ATTR SetSCLLow(void)
{
    /* It output a Low level to SCL here. */	
	GPIO_OUTPUT_SET(REMOTE_CLK_PIN, 0);
}

/*******************************************
	BUSY_PIN  =============同上，参考SDA
*******************************************/
void  ICACHE_FLASH_ATTR Set_BUSY_IO(void)
{
	/* Set this port to IO port of BUSY */
	//ETS_GPIO_INTR_DISABLE();
    	PIN_FUNC_SELECT(PERIPHS_IO_MUX_MTCK_U, FUNC_GPIO13);
	    //GPIO_REG_WRITE(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_BUSY_PIN)), GPIO_REG_READ(GPIO_PIN_ADDR(GPIO_ID_PIN(REMOTE_BUSY_PIN))) | GPIO_PIN_PAD_DRIVER_SET(REMOTE_BUSY_PIN)); //open drain;
   // GPIO_REG_WRITE(GPIO_ENABLE_ADDRESS, GPIO_REG_READ(GPIO_ENABLE_ADDRESS) | (1 << REMOTE_BUSY_PIN));
	       // gpio_register_set(GPIO_PIN_ADDR(13), GPIO_PIN_INT_TYPE_SET(GPIO_PIN_INTR_DISABLE)
                //          | GPIO_PIN_PAD_DRIVER_SET(GPIO_PAD_DRIVER_DISABLE)
               //           | GPIO_PIN_SOURCE_SET(GPIO_AS_PIN_SOURCE));

        //clear gpio14 status
       // GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, BIT(13));
	//ETS_GPIO_INTR_ENABLE();

}

void ICACHE_FLASH_ATTR SetBUSYInput(void)
{
	 /* It set BUSY port as an input */	
	//GPIO_DIS_OUTPUT(GPIO_ID_PIN(13));  	
	GPIO_DIS_OUTPUT(GPIO_ID_PIN(13));  
}

void ICACHE_FLASH_ATTR SetBUSYOutput(void)
{
	 /* It set BUSY port as an output */	
	gpio_output_set(0, 0, GPIO_ID_PIN(13), 0);
}

void ICACHE_FLASH_ATTR SetBUSYHigh(void)
{

    /* It output a High level to BUSY here. */
	GPIO_OUTPUT_SET(REMOTE_BUSY_PIN, 1);
	
}

void ICACHE_FLASH_ATTR SetBUSYLow(void)
{
    /* It output a Low level to BUSY here. */	
	GPIO_OUTPUT_SET(REMOTE_BUSY_PIN, 0);
}

UINT8 ICACHE_FLASH_ATTR GetBUSYStatus(void)
{
       // os_printf("GetBUSYStatus======11>>>>%d!\n", GPIO_INPUT_GET(GPIO_ID_PIN(REMOTE_BUSY_PIN)));
	return GPIO_INPUT_GET(GPIO_ID_PIN(REMOTE_BUSY_PIN));
}



//=======================上电初始化或待机相关ＩＯ设置函数，main，前上电调用一次
void infrared_io_init(void)			////??????
{

	Set_SDA_IO();
	SetSDAHigh();
	SetSDAOutput();

	Set_SCL_IO();
	SetSCLHigh();
	SetSCLOutput();


	Set_BUSY_IO();

	SetBUSYInput();
}

void ICACHE_FLASH_ATTR DelayTime( UINT16 lTime )
{

os_delay_us(lTime);
return;


}

void ICACHE_FLASH_ATTR RemoteDelayms(UINT16 data)
{

	os_delay_us(data*1000);

}
//===========

UINT8 ICACHE_FLASH_ATTR GetACKSign(void) 
{
	UINT8 ACKSign;
	UINT16 dataRead=0;

	SetSDAInput();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	SetSCLHigh();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	ACKSign = GetDINStatus();

	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	SetSCLLow();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	return ACKSign;

}

void ICACHE_FLASH_ATTR SendACKSign(void)
{
	SetSDAOutput();
	DelayTime(DELAY_TIME);
	SetSDALow();					///hxd;后加低SDA_Low,没有验证过
	DelayTime(DELAY_TIME);

	SetSCLHigh();					//第9次的CLK的高
	DelayTime(DELAY_TIME);			//;1mS
	
	SetSCLLow(); 
}

UINT16 ICACHE_FLASH_ATTR I2COpen2(void)
{	
	Set_SDA_IO(); 
	Set_SCL_IO(); 

	SetSDAOutput(); 
	SetSCLOutput(); 

	SetSCLHigh();  
	SetSDAHigh();

	return I2CERR_NO_ERROR; 
}

UINT16 ICACHE_FLASH_ATTR I2CClose2(void)   
{
	SetSDAOutput(); 
	SetSCLOutput(); 

	SetSCLHigh();
	SetSDAHigh();

	return I2CERR_NO_ERROR; 
}

UINT16 ICACHE_FLASH_ATTR I2CStart2(void) 
{
	int i;
	UINT8 Data_Bit,ACKSign,TmpDat;
	Data_Bit = 8;

	SetSDAOutput();
	SetSCLOutput();
	SetSCLHigh();
	SetSDAHigh();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	SetSDALow();
	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	SetSCLLow();  
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);

	return 1;
}


UINT16 ICACHE_FLASH_ATTR I2CStop2(void)
{
	SetSDAOutput();
	SetSCLOutput();
	SetSCLLow();
	SetSDALow();
	DelayTime(DELAY_TIME);

	SetSCLHigh();
	DelayTime(DELAY_TIME);

	SetSDAHigh();
	DelayTime(DELAY_TIME);  

	return I2CERR_NO_ERROR; 
}


UINT16 ICACHE_FLASH_ATTR I2CWriteData2( char bData )
{
	UINT8 Data_Bit,ACKSign,TmpDat;
	int  i;	//kal_int8 i;

	SetSDAOutput();
	SetSCLLow();
	DelayTime(DELAY_TIME);
    
	for(i=7;i>=0;i--)
	{
		DelayTime(DELAY_TIME);
		
		Data_Bit=(bData>>i)& 0x01;

		if(Data_Bit)
		SetSDAHigh();
		else
		SetSDALow();

		DelayTime(DELAY_TIME);
		SetSCLHigh();
		DelayTime(DELAY_TIME);
		SetSCLLow();		
	}
	
	ACKSign=GetACKSign();

	return ACKSign;
}

///urc_send
void  writeI2C(char* data, UINT8 count)		//hxd;通用写　发学习数据或码库数据的接口
{
	UINT8 i;
	UINT8 j = 0;
	char iBuffer;
//os_printf("writeI2C======11>>>>!\n")


	I2COpen2();
	DelayTime(DELAY_TIME);

	SetSCLLow();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	SetSCLHigh();
	
	RemoteDelayms(DELAY_ST); //20ms	//14

	I2CStart2();
	DelayTime(DELAY_TIME);
	
	
	for(i = 0; i < count; i++)	//count=7,初值
	{
		iBuffer = data[i];
		I2CWriteData2(iBuffer);
		DelayTime(DELAY_TIME);
	}


	DelayTime(DELAY_TIME);

	I2CStop2();
	DelayTime(DELAY_TIME);

	I2CClose2();
	DelayTime(DELAY_TIME);
//os_printf("writeI2C======222>>>>!\n");
}
///================================================hxd;

//hxd;========================================进入学习，方法2
void ICACHE_FLASH_ATTR Learn_start2(void)
{
	os_printf("Learn_start======11>>>>!\n");	
	I2COpen2();
	DelayTime(DELAY_TIME);

	SetSCLLow();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	SetSCLHigh();
	
	RemoteDelayms(DELAY_ST); //20ms	//14
 os_printf("GetBUSYStatus======11>>>>%d!\n", GPIO_INPUT_GET(GPIO_ID_PIN(REMOTE_BUSY_PIN)));
	I2CStart2();
	DelayTime(DELAY_TIME);
	
	I2CWriteData2(0x30);
	DelayTime(DELAY_TIME);

	I2CWriteData2(0x20);
	DelayTime(DELAY_TIME);
	
	I2CWriteData2(0x50);
	DelayTime(DELAY_TIME);

	DelayTime(DELAY_TIME);	

	I2CStop2();
	DelayTime(DELAY_TIME);

	I2CClose2();
	DelayTime(DELAY_TIME);

}

//==================================

UINT16 ICACHE_FLASH_ATTR I2CReadData(UINT8* pbData)
{
	UINT8 Data_Bit,ACKSign;
	UINT8 readdata = 0;
	UINT8 i=8;

//	 write_FF();
//	 RemoteDelayms(20);

	SetSDAInput(); 
	while (i--)
	{
		readdata<<=1;

		SetSCLHigh(); 
		DelayTime(DELAY_TIME);

		readdata |= GetDINStatus();  //读不到时可以这样试：readdata |= GetDINStatus()?0x01:0x00;

		SetSCLLow();
		DelayTime(DELAY_TIME);
		DelayTime(DELAY_TIME);		//hxd;加delay
	}
	SetSCLLow(); 
	DelayTime(DELAY_TIME);

	*pbData = readdata;

	SendACKSign();
	
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);		//hxd;1G以上的系统要加,test
	

	return I2CERR_NO_ERROR;
}


//=============================
//===================busy由低变高，读学习数据：方法2，230个字节
uint8 readI2C2(char* readtempbuf)     //UINT8
{
	UINT8 bValue;
	UINT8 i=0;
	UINT8 checksum;

	I2COpen2();
	DelayTime(DELAY_TIME);

	SetSCLLow();
	DelayTime(DELAY_TIME);
	DelayTime(DELAY_TIME);
	SetSCLHigh();
	RemoteDelayms(DELAY_ST); //20ms	

	I2CStart2();
	DelayTime(DELAY_TIME);

	//----------------------------------------
	//write
	I2CWriteData2(0x30);
	DelayTime(DELAY_TIME);
	//address point
	I2CWriteData2(0x62);
	DelayTime(DELAY_TIME);

	//---------------------------------------
	//read
	I2CStart2();
	DelayTime(DELAY_TIME);

	I2CWriteData2(0x31);
	DelayTime(DELAY_TIME);

	I2CReadData(&bValue);			//hxd;read:FCS(1B)
	DelayTime(DELAY_TIME);			//hxd;1G以上的系统要加	
	
//	if(bValue != 0x00)			;2018/5/31 11:42，为一键配对功能
//	{
//		I2CStop2();
//		DelayTime(DELAY_TIME);
//		I2CClose2();
//		DelayTime(DELAY_TIME);
//	//	kal_prompt_trace(MOD_TST, "remote_study_type_error");
//		return 0;
//	}

	i = 0;
	readtempbuf[i] = bValue;
//	kal_prompt_trace(MOD_TST, "remote_I2C_data[%d] = %d",i,readtempbuf[i]);
	checksum = 0xc3;

	for(i = 1; i < 230; i++)			//hxd;read:learndata(109B)+120=230
	{
		I2CReadData(&bValue);
		DelayTime(DELAY_TIME);
		readtempbuf[i] = bValue;
	//	kal_prompt_trace(MOD_TST, "remote_I2C_data[%d] = %d",i,readtempbuf[i]);
		checksum += bValue;
	}
	
	I2CReadData(&bValue);		//hxd;read:CK(1B)	?????
	DelayTime(DELAY_TIME);
	//	kal_prompt_trace(MOD_MMI, "remote_read_checksum = %d",bValue);
	//	kal_prompt_trace(MOD_MMI, "remote_count_checksum = %d",checksum);

	I2CStop2();
	DelayTime(DELAY_TIME);
	I2CClose2();
	DelayTime(DELAY_TIME);
}

void TestSend(uint8_t *buf)
{
	int i =0;

	os_printf("TestSend======>>>>!\n");
	writeI2C(buf, 232);
	os_printf("send data is:\n");
	system_soft_wdt_feed();
	for(i =0; i<232; i++)
	{
		uart_write_hex(0,buf[i]);
	}

}

/********************************************************************************************
 *功能描述：红外学习
 *参数: buf 红外学习内容缓冲区
 *参数: timout_flag 超时标志位
 *返回: 无
 ********************************************************************************************/
void ir_learn(uint8_t *buf,uint8_t timout_flag)		//红外学习
{
	os_printf("LearnStartTest======11>>>>!\n");
	os_printf("GetBUSYStatus======%d>>>>!\n", GetBUSYStatus());
	int i =0;
	timout_flag=0;
	os_memset(buf,0,sizeof(buf));
	system_soft_wdt_feed();
	Learn_start2();
	RemoteDelayms(100);
	system_soft_wdt_feed();

	while(GetBUSYStatus() ==0)
	{
	     system_soft_wdt_feed();
	}

	os_delay_us(20);
	readI2C2(buf+1);

	for(i=0;i<10;i++)						//测试前10个数据是否为0，如果全为0，则表示读取超时
	{
		if(buf[i]!=0)
			break;
	}

	if(i==10)								//前30个为0
	{
		timout_flag=VALID;	//超时标志位置有效
	}
	else
	{
		buf[0]=0x30;
		buf[1]=0x03;
		buf[231]=Get_csckNum(buf, 231);
	}

	os_printf("Learn data is:\n");
	for(i =0; i<232; i++)
	{
		uart_write_hex(0,buf[i]);
	}
	system_soft_wdt_feed();
//goto LOOP;	
}

